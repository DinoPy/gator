// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (
	id,
	name,
	url,
	user_id
) VALUES (
	$1, 
	$2,
	$3,
	$4
) RETURNING id, name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID     string
	Name   string
	Url    string
	UserID string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH insert_feed_follow AS (
	INSERT INTO feeds_follows (
		id,
		user_id,
		feed_id,
		created_at,
		updated_at
	) VALUES (
		$1,
		$2,
		$3,
		$4,
		$5
	) RETURNING id, user_id, feed_id, created_at, updated_at
) SELECT 
	insert_feed_follow.id, insert_feed_follow.user_id, insert_feed_follow.feed_id, insert_feed_follow.created_at, insert_feed_follow.updated_at,
	feeds.name as feed_name,
	users.name as user_name
FROM insert_feed_follow
INNER JOIN users ON users.id = insert_feed_follow.user_id
INNER JOIN feeds ON feeds.id = insert_feed_follow.feed_id
`

type CreateFeedFollowParams struct {
	ID        string
	UserID    string
	FeedID    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        string
	UserID    string
	FeedID    string
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feeds_follows
WHERE feed_id = $1 
	AND user_id = $2
`

type DeleteFeedFollowParams struct {
	FeedID string
	UserID string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.FeedID, arg.UserID)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT 
	f.name as feed_name,
	u.name as user_name,
	f.url,
	ff.created_at,
	ff.updated_at,
	ff.id
FROM feeds_follows ff
INNER JOIN users u ON u.id = ff.user_id
INNER JOIN feeds f ON f.id = ff.feed_id
WHERE u.id = $1
`

type GetFeedFollowsForUserRow struct {
	FeedName  string
	UserName  string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, id string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.FeedName,
			&i.UserName,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeeds = `-- name: GetFeeds :many
SELECT 
	f.name,
	f.url,
	u.name AS username
FROM feeds f
JOIN users u ON f.user_id = u.id
`

type GetFeedsRow struct {
	Name     string
	Url      string
	Username string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdFeedByUrl = `-- name: GetIdFeedByUrl :one
SELECT 
	id
FROM 
	feeds
WHERE 
	url = $1
`

func (q *Queries) GetIdFeedByUrl(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIdFeedByUrl, url)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, name, url, user_id, last_fetched_at
FROM feeds
ORDER BY last_fetched_at ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :one
UPDATE feeds 
SET
	last_fetched_at = $1
WHERE
	id = $2
RETURNING id, name, url, user_id, last_fetched_at
`

type MarkFeedFetchedParams struct {
	LastFetchedAt sql.NullTime
	ID            string
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.ID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}
